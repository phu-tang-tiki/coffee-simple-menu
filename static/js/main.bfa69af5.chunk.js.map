{"version":3,"sources":["constant.js","Login.js","csvReader.js","App.js","serviceWorker.js","index.js"],"names":["host","updateToken","useState","username","updateUsername","password","updatePassword","login","a","fetch","method","headers","Accept","body","JSON","stringify","response","json","data","tokenData","onSubmit","e","then","console","log","catch","preventDefault","type","id","name","onChange","event","target","value","papaparseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","token","menuData","updateMenu","message","updateMessage","uploadMenu","authentication","map","item","mon","category","price","toNumber","gia","isEnable","reponse","className","cssClass","label","onFileLoaded","parserOptions","onClick","App","Login","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.bfa69af5.chunk.js","sourcesContent":["export const host = \"https://coffeeshop-backend-production.herokuapp.com\";\n","import React, { useState } from \"react\";\nimport { host } from \"./constant\";\n\nexport default ({ updateToken }) => {\n  const [username, updateUsername] = useState(null);\n  const [password, updatePassword] = useState(null);\n  const login = async () => {\n    const response = await fetch(`${host}/user/login`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n\n    updateToken(data.tokenData);\n    return data;\n  };\n  return (\n    <div>\n      <h1>Login</h1>\n      <form\n        onSubmit={e => {\n          login()\n            .then(data => {\n              console.log(data);\n            })\n            .catch(e => console.log(e));\n          e.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          id=\"username\"\n          name=\"username\"\n          onChange={event => updateUsername(event.target.value)}\n          value={username}\n        />\n        <br />\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          onChange={event => updatePassword(event.target.value)}\n          value={password}\n        />\n        <br />\n        <button type={\"submit\"}>Login</button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { map, toNumber } from \"lodash/fp\";\nimport CSVReader from \"react-csv-reader\";\nimport \"./style.css\";\nimport { host } from \"./constant\";\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true,\n  transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n};\n\nexport default ({ token }) => {\n  const [menuData, updateMenu] = useState([]);\n  const [message, updateMessage] = useState(\"\");\n  const uploadMenu = async () => {\n    const reponse = await fetch(`${host}/menu/add-menus`, {\n      method: \"POST\",\n      headers: {\n        authentication: token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(\n        map(\n          item => ({\n            name: item.mon,\n            category: item.category,\n            price: toNumber(item.gia),\n            isEnable: true\n          }),\n          menuData\n        )\n      )\n    });\n    return await reponse.json();\n  };\n  return (\n    <div className=\"container\">\n      <div>\n        <CSVReader\n          cssClass=\"react-csv-input\"\n          label={message}\n          onFileLoaded={updateMenu}\n          parserOptions={papaparseOptions}\n        />\n      </div>\n      <div>\n        <button\n          onClick={e => {\n            e.preventDefault();\n            uploadMenu()\n              .then(e => {\n                updateMessage(\"update success\");\n              })\n              .catch(e => {\n                updateMessage(\"update error\");\n              });\n          }}\n        >\n          Confirm\n        </button>\n        <table>\n          <thead>\n            <tr>\n              <th>Mon</th>\n              <th>Category</th>\n              <th>price</th>\n            </tr>\n          </thead>\n          <tbody>\n            {map(\n              item => (\n                <tr>\n                  <td>{item.mon}</td>\n                  <td>{item.category}</td>\n                  <td>{item.gia}</td>\n                </tr>\n              ),\n              menuData\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Login\";\nimport CSVReader from \"./csvReader\";\n\nconst App = () => {\n  const [token, updateToken] = useState(null);\n  if (!token) {\n    return <Login updateToken={updateToken} />;\n  }\n  return (\n    <div>\n      <CSVReader token={token} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}